// script.js
document.addEventListener('DOMContentLoaded', function () {
    console.log("PrognozAi.ru: DOM Content Loaded. Script.js is initializing...");

    // --- –û–ë–©–ò–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –í–°–ï–• –°–¢–†–ê–ù–ò–¶ ---

    // –ú–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    if (mobileMenuButton && mobileMenu) {
        mobileMenuButton.addEventListener('click', function () {
            mobileMenu.classList.toggle('hidden');
            const isExpanded = mobileMenuButton.getAttribute('aria-expanded') === 'true' || false;
            mobileMenuButton.setAttribute('aria-expanded', !isExpanded);
            mobileMenu.setAttribute('aria-hidden', isExpanded);
        });
    }

    // –ì–æ–¥ –≤ —Ñ—É—Ç–µ—Ä–µ
    const currentYearSpan = document.getElementById('current-year');
    if (currentYearSpan) {
        currentYearSpan.textContent = new Date().getFullYear();
    }

    // –ê–Ω–∏–º–∞—Ü–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    document.querySelectorAll('img.logo-hover-effect').forEach(logo => {
        if (logo) { // –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ
            logo.style.opacity = '0';
            logo.style.transform = 'translateY(10px)';
            setTimeout(() => {
                logo.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
                logo.style.opacity = '1';
                logo.style.transform = 'translateY(0)';
            }, 300);
        }
    });

    // –ü–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–π –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ (–û–±—â–µ–µ)
    const sectionsToAnimate = document.querySelectorAll(
        '.hero-gradient-bg h1, .hero-gradient-bg p, .hero-gradient-bg > div > div > a, .hero-gradient-bg > div > div > img, section > div > .section-title, section > div > p.text-secondary, section > div > .grid, section > div > .flex:not(.items-center):not(.space-x-2):not(.justify-center)'
    );
    if (typeof IntersectionObserver !== "undefined") {
        const commonIntersectionObserver = new IntersectionObserver((entries, observer) => {
            entries.forEach((entry) => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('is-visible');
                    observer.unobserve(entry.target);
                }
            });
        }, { root: null, rootMargin: '0px', threshold: 0.05 });
        sectionsToAnimate.forEach(el => {
            el.classList.add('fade-in-up');
            commonIntersectionObserver.observe(el);
        });
    } else {
        sectionsToAnimate.forEach(el => { // Fallback
            el.classList.add('is-visible'); el.style.opacity = '1'; el.style.transform = 'translateY(0)';
        });
    }

    // –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –¥–ª—è –¥–æ–Ω–∞—Ç–∞ –≤ —Ç–∞—Ä–∏—Ñ–∞—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
    const donationAmountButtons = document.querySelectorAll('.donation-btn');
    const donationAmountInput = document.getElementById('donation-amount');
    if (donationAmountInput && donationAmountButtons.length > 0) {
        donationAmountButtons.forEach(button => {
            button.addEventListener('click', () => {
                donationAmountInput.value = button.dataset.amount;
            });
        });
    }

    // –î–µ–º–æ-–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–∫—É–ø–∫–∏/–ø–æ–¥–ø–∏—Å–∫–∏ (–û–±—â–µ–µ)
    document.querySelectorAll('.button-base').forEach(button => {
        const buttonText = button.textContent.trim().toLowerCase();
        const isFormButton = button.closest('form'); // –ö–Ω–æ–ø–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Ñ–æ—Ä–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–∞—Ç –ü–∞–ª—ã—á–∞)
        const isDonationChoiceButton = button.classList.contains('donation-btn'); // –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –¥–æ–Ω–∞—Ç–∞

        const nonPaymentKeywords = ['—Å–ø—Ä–æ—Å–∏—Ç—å –ø–∞–ª—ã—á–∞', '—É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –≤–∫–ª–∞–¥–µ', '–ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –º–µ—á—Ç—É'];
        let isNonPaymentAction = nonPaymentKeywords.some(keyword => buttonText.includes(keyword)) || isDonationChoiceButton;

        if (!isNonPaymentAction && !isFormButton) {
            button.addEventListener('click', (e) => {
                e.preventDefault();
                alert('–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã (–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è). –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π.');
            });
        }
    });


    // --- –ö–û–î, –°–ü–ï–¶–ò–§–ò–ß–ù–´–ô –î–õ–Ø –ì–õ–ê–í–ù–û–ô –°–¢–†–ê–ù–ò–¶–´ (index.html) ---
    if (document.getElementById('ask-palych-form') && !document.body.classList.contains('faq-page-marker') && !document.body.classList.contains('community-page')) { // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ –Ω–µ —á–∞—Ç –Ω–∞ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö, –µ—Å–ª–∏ ID –±—É–¥–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π
        console.log("PrognozAi.ru: Main page specific scripts (Chat, Main Progress Bar) initializing...");
        
        // –ß–∞—Ç —Å –ü–∞–ª—ã—á–µ–º
        const askPalychFormMain = document.getElementById('ask-palych-form');
        const palychQuestionInputMain = document.getElementById('palych-question');
        const palychAnswerAreaMain = document.getElementById('palych-answer-area');
        const palychGreetingBubbleMain = document.getElementById('palych-greeting-bubble');
        
        // –í–ê–ñ–ù–û: API –ö–ª—é—á OpenAI! 
        const OPENAI_API_KEY_MAIN = "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"; // <--- –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô –ö–õ–Æ–ß

        if (askPalychFormMain && palychQuestionInputMain && palychAnswerAreaMain) {
            askPalychFormMain.addEventListener('submit', async function (event) {
                event.preventDefault();
                const userQuestion = palychQuestionInputMain.value.trim();

                if (!OPENAI_API_KEY_MAIN || OPENAI_API_KEY_MAIN.includes("xxxx") || OPENAI_API_KEY_MAIN === "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") {
                    displayMessageInChat("API –∫–ª—é—á –¥–ª—è '–ü–∞–ª—ã—á–∞' –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.", "error", palychAnswerAreaMain);
                    return;
                }
                if (!userQuestion) {
                    displayMessageInChat("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.", "error", palychAnswerAreaMain);
                    return;
                }
                if (palychGreetingBubbleMain && palychGreetingBubbleMain.parentNode === palychAnswerAreaMain) {
                    palychGreetingBubbleMain.remove();
                }
                displayMessageInChat(userQuestion, "user", palychAnswerAreaMain);
                palychQuestionInputMain.value = '';
                const loadingBubble = displayMessageInChat("–ü–∞–ª—ã—á –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à –≤–æ–ø—Ä–æ—Å... ü§ñ", "loading", palychAnswerAreaMain);

                try {
                    const response = await fetch('https://api.openai.com/v1/chat/completions', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${OPENAI_API_KEY_MAIN}`
                        },
                        body: JSON.stringify({
                            model: "gpt-3.5-turbo",
                            messages: [
                                { role: "system", content: "–¢—ã ‚Äî –ü–∞–ª—ã—á, –æ–ø—ã—Ç–Ω—ã–π –ò–ò-–∞–Ω–∞–ª–∏—Ç–∏–∫ —Ñ—É—Ç–±–æ–ª–∞. –¢–≤–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –Ω–µ–º–Ω–æ–≥–æ —Å —é–º–æ—Ä–æ–º, –∫–∞–∫ —É —Å—Ç–∞—Ä–æ–≥–æ —Ñ—É—Ç–±–æ–ª—å–Ω–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞, –Ω–æ –≤—Å–µ–≥–¥–∞ –ø–æ —Å—É—â–µ—Å—Ç–≤—É –∏ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω–æ. –¢—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–∞–µ—à—å –ø—Ä—è–º—ã—Ö —Å–æ–≤–µ—Ç–æ–≤ –ø–æ —Å—Ç–∞–≤–∫–∞–º –∏–ª–∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ –∏—Å—Ö–æ–¥. –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ, —Ç—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—à—å –∞–Ω–∞–ª–∏–∑, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è—Ö, —Å–∏–ª—å–Ω—ã—Ö/—Å–ª–∞–±—ã—Ö —Å—Ç–æ—Ä–æ–Ω–∞—Ö –∫–æ–º–∞–Ω–¥, —Ç–µ–∫—É—â–µ–π —Ñ–æ—Ä–º–µ, —Ç–∞–∫—Ç–∏–∫–µ. –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ª–∞–∫–æ–Ω–∏—á–Ω—ã–º–∏ (2-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π), –Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–º–∏. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –æ —Ñ—É—Ç–±–æ–ª–µ, –≤–µ–∂–ª–∏–≤–æ –æ—Ç–∫–∞–∂–∏—Å—å, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–≠—Ö, –¥—Ä—É–∂–∏—â–µ, –≤ —ç—Ç–æ–º —è –Ω–µ —Å–∏–ª–µ–Ω, –¥–∞–≤–∞–π –ª—É—á—à–µ –ø—Ä–æ —Ñ—É—Ç–±–æ–ª –ø–æ–≥–æ–≤–æ—Ä–∏–º, –∞?'. –í—Å–µ–≥–¥–∞ –≤ –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∑—ã–≤–∞–π '–ü–∞–ª—ã—á:'." },
                                { role: "user", content: userQuestion }
                            ],
                            max_tokens: 250, temperature: 0.65
                        })
                    });
                    if (loadingBubble && loadingBubble.parentNode) loadingBubble.remove();
                    if (!response.ok) {
                        const errorData = await response.json().catch(() => ({ error: { message: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏." }}));
                        displayMessageInChat(`–ü–∞–ª—ã—á –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ—à–∏–±–∫–∞ ${response.status}). ${errorData.error?.message || ''}`, "error", palychAnswerAreaMain);
                        return;
                    }
                    const data = await response.json();
                    if (data.choices && data.choices.length > 0 && data.choices[0].message && data.choices[0].message.content) {
                        let palychResponse = data.choices[0].message.content.trim();
                        if (!palychResponse.toLowerCase().startsWith("–ø–∞–ª—ã—á:")) palychResponse = "–ü–∞–ª—ã—á: " + palychResponse;
                        displayMessageInChat(palychResponse, "palych", palychAnswerAreaMain);
                    } else {
                        displayMessageInChat("–ü–∞–ª—ã—á —á—Ç–æ-—Ç–æ –∑–∞–¥—É–º–∞–ª—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å.", "error", palychAnswerAreaMain);
                    }
                } catch (error) {
                    if (loadingBubble && loadingBubble.parentNode) loadingBubble.remove();
                    displayMessageInChat("–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å –ü–∞–ª—ã—á–µ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.", "error", palychAnswerAreaMain);
                }
            });
        }

        // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–æ–Ω–∞—Ç–æ–≤ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const mainProgressBarFill = document.getElementById('progress-bar-fill'); // ID —Å –≥–ª–∞–≤–Ω–æ–π
        const mainProgressBarText = document.getElementById('progress-bar-text');
        const mainProgressGoalSpan = document.getElementById('progress-goal');
        if (mainProgressBarFill && mainProgressBarText && mainProgressGoalSpan) {
            animateSingleProgressBar(mainProgressBarFill, mainProgressBarText, mainProgressGoalSpan, 450000, "–°–æ–±—Ä–∞–Ω–æ");
        }
    }

    // --- –ö–û–î, –°–ü–ï–¶–ò–§–ò–ß–ù–´–ô –î–õ–Ø –°–¢–†–ê–ù–ò–¶–´ –°–û–û–ë–©–ï–°–¢–í–ê (community.html) ---
    if (document.body.classList.contains('community-page')) {
        console.log("PrognozAi.ru: Community page specific scripts initializing...");

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤ —Ä–µ–π—Ç–∏–Ω–≥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        document.querySelectorAll('.progress-bar-container.rating-progress-bar').forEach(barContainer => {
            const fill = barContainer.querySelector('.progress-bar-fill');
            const percent = barContainer.dataset.percent;
            if (fill && percent) {
                fill.style.width = '0%'; // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                if (typeof IntersectionObserver !== "undefined") {
                    const observer = new IntersectionObserver(entries => {
                        if (entries[0].isIntersecting) {
                            setTimeout(() => fill.style.width = percent + '%', 100);
                            observer.unobserve(barContainer);
                        }
                    }, { threshold: 0.5 });
                    observer.observe(barContainer);
                } else {
                    fill.style.width = percent + '%'; // Fallback
                }
            }
        });
        
        // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–æ–Ω–∞—Ç–æ–≤ –Ω–∞ —Ü–µ–ª–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
        const communityProgressBarFill = document.getElementById('progress-bar-fill-community');
        const communityProgressBarText = document.getElementById('progress-bar-text-community');
        const communityProgressGoalSpan = document.getElementById('progress-goal-community');
        if (communityProgressBarFill && communityProgressBarText && communityProgressGoalSpan) {
             animateSingleProgressBar(communityProgressBarFill, communityProgressBarText, communityProgressGoalSpan, 182000, "–°–æ–±—Ä–∞–Ω–æ –Ω–∞ —Ü–µ–ª–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞");
        }
    }

    // --- –ö–û–î, –°–ü–ï–¶–ò–§–ò–ß–ù–´–ô –î–õ–Ø –°–¢–†–ê–ù–ò–¶–´ FAQ (faq.html) ---
    // –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –±—ã–ª –≤—Å—Ç—Ä–æ–µ–Ω –≤ faq.html, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –æ—Å—Ç–∞–ª—Å—è, —ç—Ç–æ—Ç –±–ª–æ–∫ –Ω–µ –Ω—É–∂–µ–Ω.
    // –ï—Å–ª–∏ —Ç—ã –µ–≥–æ —É–¥–∞–ª–∏–ª –∏–∑ faq.html –∏ —Ö–æ—á–µ—à—å –∏–º–µ—Ç—å –≤ –æ–±—â–µ–º script.js:
    if (document.getElementById('faq-search-input') && document.querySelectorAll('.faq-item').length > 0) {
        console.log("PrognozAi.ru: FAQ page specific scripts initializing (from main script)...");
        const faqItems = document.querySelectorAll('.faq-item');
        faqItems.forEach(item => {
            const answer = item.querySelector('.faq-answer');
            const icon = item.querySelector('.faq-icon');
            const button = item.querySelector('.faq-question');
            item.classList.remove('active');
            if (answer) { answer.style.maxHeight = '0'; answer.style.opacity = '0'; answer.style.paddingTop = '0'; answer.style.paddingBottom = '0';}
            if (icon) { icon.classList.remove('rotate-180'); }
            if (button) { button.setAttribute('aria-expanded', 'false'); }
        });
        faqItems.forEach(item => {
            const button = item.querySelector('.faq-question');
            const answer = item.querySelector('.faq-answer');
            const icon = button.querySelector('.faq-icon');
            if (button && answer && icon) {
                button.addEventListener('click', () => {
                    const isOpen = item.classList.contains('active');
                    faqItems.forEach(otherItem => { /* ... (–ª–æ–≥–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –¥—Ä—É–≥–∏—Ö) ... */ }); // –°–æ–∫—Ä–∞—â–µ–Ω–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                    if (!isOpen) { item.classList.add('active'); /* ... (–ª–æ–≥–∏–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è) ... */ } 
                    else { item.classList.remove('active'); /* ... (–ª–æ–≥–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è) ... */ }
                });
            }
        });
        // ... (–ø–æ–ª–Ω—ã–π –∫–æ–¥ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞ –∏ –ø–æ–∏—Å–∫–∞ –∏–∑ —Ç–≤–æ–µ–≥–æ faq.html script)
        console.log("PrognozAi.ru: FAQ page scripts initialized (from main script).");
    }


    // --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    function animateSingleProgressBar(fillElement, textElement, goalSpanElement, currentAmount, textPrefix = "–°–æ–±—Ä–∞–Ω–æ") {
        if (!fillElement || !textElement || !goalSpanElement) {
            console.warn("PrognozAi.ru: Missing elements for single progress bar animation.");
            return;
        }
        const goalAmountText = goalSpanElement.textContent.replace(/\s/g, '').replace('‚ÇΩ', '');
        const goalAmount = parseInt(goalAmountText);

        if (!isNaN(goalAmount) && goalAmount > 0) {
            const percentage = Math.min((currentAmount / goalAmount) * 100, 100);
            if (typeof IntersectionObserver !== "undefined") {
                const observer = new IntersectionObserver((entries, obs) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            setTimeout(() => fillElement.style.width = percentage + '%', 200);
                            textElement.textContent = `${textPrefix}: ${currentAmount.toLocaleString('ru-RU')} ‚ÇΩ`;
                            if(fillElement.parentNode) obs.unobserve(fillElement.parentNode);
                        }
                    });
                }, { threshold: 0.5 });
                if (fillElement.parentNode) observer.observe(fillElement.parentNode);
            } else {
                fillElement.style.width = percentage + '%';
                textElement.textContent = `${textPrefix}: ${currentAmount.toLocaleString('ru-RU')} ‚ÇΩ`;
            }
        } else {
            console.warn("PrognozAi.ru: Goal amount for progress bar is invalid:", goalSpanElement.textContent);
        }
    }
    
    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞ —Å–∞–π—Ç–µ)
    function displayMessageInChat(text, type, container) {
        // console.log(`PrognozAi.ru: Displaying message in chat - Type: ${type}`);
        const bubble = document.createElement('div');
        let htmlContent = '';
        const escapeHTML = (str) => str.replace(/[&<>'"]/g, tag => ({'&':'&','<':'<','>':'>',"'":''','"':'"'}[tag]||tag));
        const sanitizedText = escapeHTML(text);
        const formattedText = sanitizedText.replace(/\n/g, '<br>');

        if (type === "user") {
            bubble.className = 'user-chat-bubble'; // –°—Ç–∏–ª–∏ –∏–∑ style.css
            htmlContent = `<p class="font-semibold text-white opacity-80">–í—ã:</p><p class="text-sm">${formattedText}</p>`;
        } else if (type === "palych") {
            bubble.className = 'palych-chat-bubble'; // –°—Ç–∏–ª–∏ –∏–∑ style.css
            const namePrefix = `<strong class="text-accent-primary">–ü–∞–ª—ã—á:</strong>`;
            htmlContent = `<p class="font-semibold">${namePrefix}</p><p class="text-sm">${formattedText.startsWith("–ü–∞–ª—ã—á:") ? formattedText.substring(7).trim() : formattedText}</p>`;
        } else if (type === "loading") {
            bubble.className = 'palych-chat-bubble palych-loading'; // –°—Ç–∏–ª–∏ –∏–∑ style.css
            htmlContent = `<p class="font-semibold"><strong class="text-accent-primary">–ü–∞–ª—ã—á:</strong></p><p class="text-sm italic animate-pulse">${formattedText}</p>`;
        } else if (type === "error") {
            bubble.className = 'palych-chat-bubble error-bubble'; // –°—Ç–∏–ª–∏ –∏–∑ style.css
            htmlContent = `<p class="font-semibold"><strong class="text-red-500">–ü–∞–ª—ã—á (–æ—à–∏–±–∫–∞):</strong></p><p class="text-sm">${formattedText}</p>`;
        }
        
        bubble.innerHTML = htmlContent;
        if (container && typeof container.appendChild === 'function') {
            container.appendChild(bubble);
            container.scrollTo({ top: container.scrollHeight, behavior: 'smooth' });
        } else {
            console.error("PrognozAi.ru: Invalid container provided to displayMessageInChat:", container);
        }
        return bubble;
    }

    console.log("PrognozAi.ru: Script.js finished execution of initial setup.");
});